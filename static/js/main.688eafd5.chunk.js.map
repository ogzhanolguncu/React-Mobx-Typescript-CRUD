{"version":3,"sources":["app/common/form/TextInput.tsx","app/common/form/TextAreaInput.tsx","app/api/agent.ts","app/stores/noteStore.ts","app/stores/rootStore.ts","features/notes/form/NotesForm.tsx","app/layout/LoadingComponent.tsx","features/notes/dashboard/NotesList.tsx","features/notes/dashboard/NotesDashboard.tsx","app/layout/App.tsx","serviceWorker.ts","index.tsx"],"names":["TextInput","input","width","type","placeholder","meta","touched","error","FormField","Label","basic","color","style","float","TextAreaInput","rows","axios","defaults","baseURL","responseBody","response","data","sleep","ms","Promise","resolve","setTimeout","requests","url","get","then","body","post","put","delete","list","details","id","create","note","update","NoteStore","rootStore","getNoteFromStore","noteRegistry","this","Array","from","values","observable","Map","computed","action","selectedItemId","toJS","a","async","loadingInitial","agent","runInAction","set","notes","forEach","submitting","console","log","RootStoreContext","createContext","noteStore","observer","useContext","createNote","editNote","selectNote","useState","setNote","useEffect","validate","combineValidators","title","isRequired","message","description","Container","Header","as","dividing","size","Grid","Column","initialValues","onSubmit","render","handleSubmit","form","invalid","pristine","Form","event","promise","reset","name","component","Button","loading","disabled","floated","primary","content","onClick","LoadingComponent","Loader","active","getNotesFromStore","deleteNote","List","selection","animated","margin","map","index","key","Item","Icon","Content","loadNotes","textAlign","height","verticalAlign","maxWidth","border","columns","padded","Row","stretched","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.688eafd5.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FieldRenderProps } from 'react-final-form'\r\nimport { FormFieldProps, FormField, Label } from 'semantic-ui-react'\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps{}\r\n\r\n\r\nconst TextInput: React.FC<IProps> = ({input, width, type, placeholder, meta: {touched, error}}) => {\r\n    return (\r\n        <FormField error={touched && !!error} type={type} width={width}>\r\n            <input {...input} placeholder={placeholder}/>\r\n            {touched && error && (\r\n                <Label basic color='red' style={{float: 'left'}}>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </FormField>\r\n    );\r\n};\r\n\r\nexport default TextInput\r\n","import React from 'react'\r\nimport { FieldRenderProps } from 'react-final-form'\r\nimport { FormFieldProps, FormField, Label } from 'semantic-ui-react'\r\n\r\ninterface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps{}\r\n\r\n\r\nconst TextAreaInput: React.FC<IProps> = ({input, width, rows, placeholder, meta: {touched, error}}) => {\r\n    return (\r\n        <FormField error={touched && !!error}  width={width}>\r\n            <textarea {...input} placeholder={placeholder} rows={rows}/>\r\n            {touched && error && (\r\n                <Label basic color='red' style={{float: 'left'}}>\r\n                    {error}\r\n                </Label>\r\n            )}\r\n        </FormField>\r\n    )\r\n}\r\n\r\nexport default TextAreaInput","import axios, { AxiosResponse } from 'axios'\r\nimport { INote } from '../models/note';\r\n\r\naxios.defaults.baseURL = 'https://5e15b69b21f9c90014c3d59e.mockapi.io/'\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n  new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\nconst requests = {\r\n  get: (url: string) =>\r\n    axios\r\n      .get(url).then(sleep(1000))\r\n      .then(responseBody),\r\n  post: (url: string, body: {}) =>\r\n    axios\r\n      .post(url, body).then(sleep(1000))\r\n      .then(responseBody),\r\n  put: (url: string, body: {}) =>\r\n    axios\r\n      .put(url, body).then(sleep(1000))\r\n      .then(responseBody),\r\n  del: (url: string) =>\r\n    axios\r\n      .delete(url).then(sleep(1000))\r\n      .then(responseBody),\r\n};\r\n\r\n\r\nconst Notes = {\r\n  list: () => requests.get(`/notes/`),\r\n  details: (id: string) => requests.get(`/notes/${id}`),\r\n  create: (note: INote) => requests.post('/notes', note),\r\n  update: (note: INote) => requests.put(`/notes/${note.id}`, note),\r\n  delete: (id: string) => requests.del(`/notes/${id}`),\r\n};\r\n\r\n\r\n\r\nexport default { Notes };","import { RootStore } from \"./rootStore\";\r\nimport { INote } from \"../models/note\";\r\nimport { observable, action, toJS, runInAction, computed } from 'mobx'\r\nimport agent from \"../api/agent\";\r\nexport default class NoteStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore\r\n    }\r\n\r\n\r\n    @observable noteRegistry = new Map();\r\n    @observable note: INote | null = null;\r\n    @observable submitting: boolean = false;\r\n    @observable loadingInitial: boolean = false;\r\n    @observable noteConunt: number = 0;\r\n    @observable selectedItemId: string | null= null;\r\n\r\n    getNoteFromStore = (id: string): INote => {\r\n        return this.noteRegistry.get(id);\r\n    }\r\n\r\n\r\n    @computed get getNotesFromStore() {\r\n        return Array.from(this.noteRegistry.values());\r\n      };\r\n\r\n    @action selectNote = (id: string) => {\r\n        this.selectedItemId = id;\r\n        let note = this.getNoteFromStore(this.selectedItemId!);\r\n        return toJS(note);\r\n    }\r\n\r\n\r\n\r\n    @action loadNote = async (id: string) => {\r\n        let note = this.getNoteFromStore(id);\r\n        if (note) {\r\n            this.note = note;\r\n            return toJS(note);\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                note = await agent.Notes.details(id);\r\n                runInAction('loading note', () => {\r\n                    this.note = note;\r\n                    this.noteRegistry.set(note.id, note);\r\n                    this.loadingInitial = false;\r\n                });\r\n                return note;\r\n            } catch (error) {\r\n                runInAction('loading note error', () => {\r\n                    this.loadingInitial = false;\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    @action loadNotes = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const notes: INote[] = await agent.Notes.list()\r\n            runInAction('loading activities', () => {\r\n                notes.forEach((note) => {\r\n                    this.noteRegistry.set(note.id, note);\r\n                });\r\n                this.loadingInitial = false\r\n                \r\n            });\r\n        } catch (error) {\r\n            runInAction('loading activities', () => {\r\n                this.loadingInitial = false\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    @action createNote = async (note: INote) => {\r\n        this.submitting = true;\r\n        console.log(1,this.submitting)\r\n        try {\r\n            await agent.Notes.create(note);\r\n            runInAction('creating activity', () => {\r\n                this.noteRegistry.set(note.id, note);\r\n                this.submitting = false;\r\n                console.log(2,this.submitting)\r\n            })\r\n        } catch (error) {\r\n            runInAction('create activity error', () => {\r\n                this.submitting = false;\r\n            });\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n\r\n    @action editNote  = async (note: INote) => {\r\n        this.submitting = true;\r\n        try {\r\n            await agent.Notes.update(note);\r\n            runInAction('editing activity', () => {\r\n                this.noteRegistry.set(note.id, note);\r\n                this.note = note;\r\n                this.submitting = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction('editing activity error', () => {\r\n                this.submitting = false\r\n            })\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    @action deleteNote = async (\r\n        id: string\r\n      ) => {\r\n        this.loadingInitial = true;\r\n        try {\r\n          await agent.Notes.delete(id);\r\n          runInAction('deleting note', () => {\r\n            this.noteRegistry.delete(id);\r\n            this.loadingInitial = false;\r\n          });\r\n        } catch (error) {\r\n          runInAction('delete activity error', () => {\r\n            this.loadingInitial= false;\r\n          });\r\n          console.log(error);\r\n        }\r\n      };\r\n    \r\n\r\n\r\n\r\n\r\n    \r\n    \r\n}\r\n\r\n\r\n","import { createContext } from \"react\";\r\nimport NoteStore from \"./noteStore\";\r\n\r\nexport class RootStore {\r\n    noteStore: NoteStore;\r\n\r\n\r\n    constructor() {\r\n        this.noteStore = new NoteStore(this);\r\n    }\r\n}\r\n\r\n\r\nexport const RootStoreContext = createContext(new RootStore());","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Form as FinalForm, Field } from 'react-final-form'\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { Grid, Button, Form, Container, Header } from 'semantic-ui-react';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { INote } from '../../../app/models/note';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\n\r\n\r\nconst NotesForm: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext)\r\n    const { createNote, submitting, editNote, selectNote, selectedItemId } = rootStore.noteStore;\r\n\r\n    const [note , setNote] = useState();\r\n\r\n    useEffect(() => {\r\n        if(!selectedItemId){}\r\n        let note = selectNote(selectedItemId!);\r\n        setNote(note);\r\n        console.log(note);\r\n      }, [selectedItemId,selectNote]);\r\n\r\n      \r\n    const validate = combineValidators({\r\n        title: isRequired({ message: 'Title is required.' }),\r\n        description: isRequired({ message: 'Description is required' }),\r\n\r\n    });\r\n\r\n\r\n    const handlerFinalFormSubmit = async (values: INote) => {\r\n        if(!values.id) {\r\n            createNote(values)\r\n        }\r\n        else {\r\n            editNote(values)\r\n        }\r\n    };\r\n\r\n    \r\n\r\n    \r\n\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h2' dividing size='medium'>Note Details</Header>\r\n            <Grid>\r\n                <Grid.Column width={11}>\r\n                    <FinalForm\r\n                        validate={validate}\r\n                        initialValues={note}\r\n                        onSubmit={handlerFinalFormSubmit}\r\n                        render={({ handleSubmit, form, invalid, pristine }) => (\r\n                            <Form\r\n                                onSubmit={(event) => {\r\n                                    const promise = handleSubmit(event);\r\n                                    promise && promise.then(() => {\r\n                                        form.reset();\r\n                                    })\r\n                                    return promise;\r\n                                }}>\r\n                                <Field\r\n                                    name='title'\r\n                                    placeholder='Title'\r\n                                    component={TextInput}\r\n                                />\r\n                                <Field\r\n                                    placeholder='Description'\r\n                                    name='description'\r\n                                    rows={3}\r\n                                    component={TextAreaInput} />\r\n                                <Button loading={submitting} disabled={invalid || pristine || submitting} floated='right' primary type='submit' content='Submit' ></Button>\r\n                                <Button floated='right' type='button' content='Cancel' onClick={form.reset}></Button>\r\n                            </Form>\r\n                        )} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default observer(NotesForm)\r\n","import React from 'react';\r\nimport { Loader } from 'semantic-ui-react';\r\n\r\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\r\n  content\r\n}) => {\r\n  return (\r\n        <Loader active content={content} />\r\n  );\r\n};\r\n\r\nexport default LoadingComponent;","import React, { useContext, Fragment } from 'react'\r\nimport { List, Container, Header, Icon, Divider } from 'semantic-ui-react'\r\nimport { RootStoreContext } from '../../../app/stores/rootStore'\r\nimport { observer } from 'mobx-react-lite'\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent'\r\n\r\nconst NotesList: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext)\r\n    const { getNotesFromStore, loadingInitial, submitting, selectNote, deleteNote } = rootStore.noteStore;\r\n\r\n\r\n    if (loadingInitial || submitting) return <LoadingComponent content={\"Loading notes...\"} />\r\n    return (\r\n        <Container>\r\n            <Header as='h2' dividing size='medium'>Note List</Header>\r\n                <List selection animated style={{ margin: '10px' }}>\r\n                    {getNotesFromStore.map((note, index) => {\r\n                        return (\r\n                            <Fragment key={index}>\r\n                                <List.Item  onClick={() => selectNote(note.id)} >\r\n                                <List.Header >{note.title}  <Icon name='trash' onClick={() => deleteNote(note.id)}/></List.Header>\r\n                                <List.Content >{note.description}</List.Content>\r\n                               \r\n                            </List.Item>\r\n                            </Fragment>\r\n                        )\r\n                    })}\r\n                </List>\r\n                \r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default observer(NotesList)\r\n","import React, { Fragment, useContext, useEffect } from 'react'\r\nimport { Grid, Container } from 'semantic-ui-react'\r\nimport NotesForm from '../form/NotesForm';\r\nimport { RootStoreContext } from '../../../app/stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport NotesList from './NotesList';\r\n\r\nconst Dashboard: React.FC = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        loadNotes,\r\n    } = rootStore.noteStore;\r\n\r\n    useEffect(() => {\r\n        loadNotes();\r\n    }, [loadNotes]);\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n                <Grid.Column style={{ maxWidth: 1100 }}>\r\n                    <Container style={{ border: '2px solid #CFDEF3', height: 'auto', }}>\r\n                        <Grid columns={2} padded='vertically'  >\r\n                            <Grid.Row stretched>\r\n                                <Grid.Column>\r\n                                    <NotesList />\r\n                                </Grid.Column>\r\n                                <Grid.Column>\r\n                                    <Container>\r\n                                        <NotesForm />\r\n                                    </Container>\r\n                                </Grid.Column>\r\n                            </Grid.Row>\r\n                        </Grid>\r\n                    </Container>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nexport default observer(Dashboard);\r\n","import React from 'react';\r\nimport Dashboard from '../../features/notes/dashboard/NotesDashboard';\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Dashboard />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}